services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9001:9001"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,LISTENER_EXTERNAL://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_HOSTNAME: kafka
#      JMX_PORT: 9001
#      KAFKA_OPTS: "-javaagent:/usr/app/jmx_prometheus_javaagent.jar=9001:/usr/app/kafka-2_0_0.yml"
      KAFKA_OPTS: >-
        -javaagent:/usr/app/jmx_prometheus_javaagent.jar=9001:/usr/app/kafka-2_0_0.yml
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=9999
        -Dcom.sun.management.jmxremote.rmi.port=9999
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=kafka
    volumes:
      - ./jmx_exporter/kafka-2_0_0.yml:/usr/app/kafka-2_0_0.yml
      - ./jmx_exporter/jmx_prometheus_javaagent.jar:/usr/app/jmx_prometheus_javaagent.jar
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui
#    ports:
#      - "8085:8085"
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093

  producer-app:
    build:
      context: ./call-event-producer-service
      dockerfile: Dockerfile
    hostname: producer-app
    container_name: producer-app
    ports:
      - "8080:8080"
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_TOPIC_OUTPUT_STREAM: channel-event-aggregator-input1
      KAFKA_TOPIC_AGENT_STATUS_STREAM: agent-status-topic
      SERVER_PORT: 8080

  aggregator-app:
    build:
      context: ./channel-event-aggregator
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - producer-app
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_APPLICATION_ID: channel-event-aggregator-app
      SPRING_CLOUD_STREAM_FUNCTION_DEFINITION: processChannelEvents
      SERVER_PORT: 8081
      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_IN_0_DESTINATION: channel-event-aggregator-input1
      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_IN_0_GROUP: channel-event-aggregator-consumer-group
      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_DESTINATION: channel-event-aggregator-output
      SPRING_CLOUD_STREAM_KAFKA_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_PRODUCER_CONFIGURATION_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
      SPRING_CLOUD_STREAM_KAFKA_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_PRODUCER_CONFIGURATION_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_DEFAULT_KEY_SERDE: org.apache.kafka.common.serialization.Serdes$StringSerde
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_DEFAULT_VALUE_SERDE: org.apache.kafka.common.serialization.Serdes$StringSerde
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_AUTO_OFFSET_RESET: earliest
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_PROCESSING_GUARANTEE: exactly_once_v2
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_STATE_DIR: /tmp/kafka-streams/${HOSTNAME}
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_COMMIT_INTERVAL_MS: 100
      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_DLQ_ENABLED: "false"
    deploy:
      replicas: 2
#
#  aggregator-app-2:
#    build:
#      context: ./channel-event-aggregator
#      dockerfile: Dockerfile
#    hostname: aggregator-app-2
#    container_name: aggregator-app-2
#    ports:
#      - "8083:8081"
#    depends_on:
#      - kafka
#      - producer-app
#    environment:
#      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_APPLICATION_ID: channel-event-aggregator-app
#      SPRING_CLOUD_STREAM_FUNCTION_DEFINITION: processChannelEvents
#      SERVER_PORT: 8081
#      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_IN_0_DESTINATION: channel-event-aggregator-input1
#      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_IN_0_GROUP: channel-event-aggregator-consumer-group
#      SPRING_CLOUD_STREAM_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_DESTINATION: channel-event-aggregator-output
#      SPRING_CLOUD_STREAM_KAFKA_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_PRODUCER_CONFIGURATION_KEY_SERIALIZER: org.apache.kafka.common.serialization.StringSerializer
#      SPRING_CLOUD_STREAM_KAFKA_BINDINGS_PROCESSCHANNELEVENTS_OUT_0_PRODUCER_CONFIGURATION_VALUE_SERIALIZER: org.springframework.kafka.support.serializer.JsonSerializer
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_DEFAULT_KEY_SERDE: org.apache.kafka.common.serialization.Serdes$StringSerde
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_DEFAULT_VALUE_SERDE: org.apache.kafka.common.serialization.Serdes$StringSerde
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_AUTO_OFFSET_RESET: earliest
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_PROCESSING_GUARANTEE: exactly_once_v2
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_STATE_DIR: /tmp/kafka-streams
#      SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_CONFIGURATION_COMMIT_INTERVAL_MS: 100

  agent-server-app-1:
    build:
      context: ./agent-server
      dockerfile: Dockerfile
    hostname: agent-server-app-1
    container_name: agent-server-app-1
    ports:
      - "8082:8082"
    depends_on:
      - kafka
      - aggregator-app
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_CONSUMER_GROUP_ID: agent-server-consumer-group
      KAFKA_TOPIC_AGGREGATOR_OUTPUT_TOPIC_NAME: channel-event-aggregator-output
      KAFKA_TOPIC_AGENT_STATUS_INPUT_STREAM: agent-status-topic
      SERVER_PORT: 8082
      SPRING_KAFKA_CONSUMER_PROPERTIES_JSON_TRUSTED_PACKAGES: org.example.commonmodel.model,org.example.calleventproducerservice.model,java.util,java.lang

  agent-server-app-2:
    build:
      context: ./agent-server
      dockerfile: Dockerfile
    hostname: agent-server-app-2
    container_name: agent-server-app-2
    ports:
      - "8084:8082"
    depends_on:
      - kafka
      - aggregator-app
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      SPRING_KAFKA_CONSUMER_GROUP_ID: agent-server-consumer-group
      KAFKA_TOPIC_AGGREGATOR_OUTPUT_TOPIC_NAME: channel-event-aggregator-output
      KAFKA_TOPIC_AGENT_STATUS_INPUT_STREAM: agent-status-topic
      SERVER_PORT: 8082
      SPRING_KAFKA_CONSUMER_PROPERTIES_JSON_TRUSTED_PACKAGES: org.example.commonmodel.model,org.example.calleventproducerservice.model,java.util,java.lang

  nginx:
    image: nginx:latest
    container_name: nginx-load-balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - agent-server-app-1
      - agent-server-app-2

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      - kafka

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    depends_on:
      - prometheus

volumes:
  grafana_data: